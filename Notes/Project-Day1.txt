================================================================
			Java Project
================================================================

	Title		:	Employee Management System 

	Client		:	Coderu, Bridgesoft and etc. 

	IDE's		:	STS/Intellij, VSC editor.

	Environments	:	ReactJS, Spring Boot, MySQL.

	Tools		:	Postman, GIT/GITHUB, Maven

	Team Size		:	2 
================================================================	

step1:
------
	Create below folder structure inside 'D' drive.

	ex:
		Java Project
			|
			|---STS-workspace
			|---react-workspace
			|---Notes

step2:
------
	Launch STS IDE by choosing workspace location(STS-workspace).


step3:
-----
	Create a spring starter project i.e springboot-backend.
	ex:
		starters:
				Spring Web 
				Spring Data JPA
				MySQL Driver 
				Lombok 
				Spring Boot DevTools 	

step4:
------
	Create following packages inside "src/main/java" folder.
	ex:
		springboot-backend
			|
			|---src/main/java
				|
				|---com.ihub.www (base package) 
				|	
				|---com.ihub.www.controller
				|	
				|---com.ihub.www.service
				|
				|---com.ihub.www.repo
				|
				|---com.ihub.www.model
				|
				|---com.ihub.www.exception 
			|
			|
			|---src/main/resources
			|
			|---src/test/java
			|
			|---pom.xml 	

step5:
------
	Connect to mysql database.
	ex:
		cmd> mysql  -u root -p  (enter btn)
		     password : root 
		

step6:
------
	Create a employee_mangement_schema and use it in mysql database.
	ex:
		create schema employee_management_system;
		
		use employee_management_system;

		show databases;

step7:
-----
	Create employees table and insert few records.
	ex:
		create table employees(id int(3) AUTO_INCREMENT,
					first_name varchar(10),
					  last_name varchar(10),
					    email varchar(16),
					      primary key(id));

		insert into employees(id,first_name,last_name,email) 
		values(1,'Alan','Morries','alan@gmail.com');

		insert into employees(id,first_name,last_name,email) 
		values(2,'Erick','Anderson','eric@yahoo.com');

		commit;

		select * from employees;

step8:
------
	Configure server port , mysql and hibernate properties in application.properties file.

application.properties
----------------------

server.port: 9191

spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost/employee_management_system
spring.datasource.username=root
spring.datasource.password=root


spring.jpa.hibernate.ddl-auto= update
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQL8Dialect

		
step9:
------
	Create a Employee model class inside "com.ihub.www.model" package.

Employee.java
-------------
package com.ihub.www.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name="employees")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Employee 
{
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	
	@Column
	private String firstName;
	
	@Column
	private String lastName;
	
	@Column
	private String email;
}

step10:
-------
	Create a EmployeeRepository inside "com.ihub.www.repo" package.


EmployeeRepository.java (interface)
-----------------------------------
package com.ihub.www.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.ihub.www.model.Employee;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee,Long>
{

}

step11:
-------
	Create a ResourceNotFoundException.java file inside "com.ihub.www.exception" package.

ResourceNotFoundException.java
-------------------------------
package com.ihub.www.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException
{
	public ResourceNotFoundException(String message)
	{
		super(message);
	}
}



step12:
-------

	Create a EmployeeController.java file inside "com.ihub.www.controller" package.

EmployeeController.java
-----------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService; 
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
}




step13:
------
	Create a EmployeeService.java file inside "com.ihub.www.service" package.

EmployeeService.java
---------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
}

step14:
------
	Run spring boot starter project.
	

step15:
------
	Test the application in postman tool.
	ex:
		http://localhost:9191/api/v1/employees












































	 



























































