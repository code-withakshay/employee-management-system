step41:
------
	Create a get employee by id REST API in spring boot.

EmployeeController.java
---------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService; 
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
	
	@PostMapping("/employees")
	public Employee addEmployee(@RequestBody Employee employee)
	{
		return employeeService.addEmployee(employee);
	}
	
	@GetMapping("/employees/{id}")
	public Employee getEmployeeById(@PathVariable long id)
	{
		return employeeService.getEmployeeById(id);
	}
}

EmployeeService.java
-------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.ihub.www.exception.ResourceNotFoundException;
import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
	
	public Employee addEmployee(Employee employee)
	{
		return employeeRepository.save(employee);
	}
	

	public Employee getEmployeeById(long id)
	{
		return employeeRepository.findById(id)
				.orElseThrow(()-> new ResourceNotFoundException("Id Not Found"));
	}
}

step42:
-------
	Create update employee by id REST API in spring boot.

EmployeeController.java
-----------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService; 
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
	
	@PostMapping("/employees")
	public Employee addEmployee(@RequestBody Employee employee)
	{
		return employeeService.addEmployee(employee);
	}
	
	@GetMapping("/employees/{id}")
	public Employee getEmployeeById(@PathVariable long id)
	{
		return employeeService.getEmployeeById(id);
	}
	
	@PutMapping("/employees/{id}")
	public ResponseEntity<Employee> updateEmployeeById(@PathVariable long id,@RequestBody Employee employee)
	{
		return employeeService.updateEmployeeById(id,employee);
	}
}



EmployeeService.java
---------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.ihub.www.exception.ResourceNotFoundException;
import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
	
	public Employee addEmployee(Employee employee)
	{
		return employeeRepository.save(employee);
	}
	

	public Employee getEmployeeById(long id)
	{
		return employeeRepository.findById(id)
				.orElseThrow(()-> new ResourceNotFoundException("Id Not Found"));
	}
	
	public ResponseEntity<Employee> updateEmployeeById(long id,Employee employee)
	{
		Employee oldEmp=employeeRepository.findById(employee.getId()).orElseThrow(()-> new ResourceNotFoundException("Id Not Found"));
		
		oldEmp.setFirstName(employee.getFirstName());
		oldEmp.setLastName(employee.getLastName());
		oldEmp.setEmail(employee.getEmail());
		
		Employee updateEmp=employeeRepository.save(oldEmp);
		
		return ResponseEntity.ok(updateEmp);
	}
}

step43:
-------
	Add get and put method inside "EmployeeService.js" file.

EmployeeService.js
-----------------
import axios from 'axios';

const EMPLOYEE_API="http://localhost:9191/api/v1/employees";

class EmployeeService
{
    getEmployees()
    {
        return axios.get(EMPLOYEE_API);
    }

    addEmployee(employee)
    {
        return axios.post(EMPLOYEE_API,employee); 
    }

    getEmployeeById(employeeId)
    {
        return axios.get(EMPLOYEE_API+'/'+employeeId);
    }

    updateEmployee(employeeId,employee)
    {
         return axios.put(EMPLOYEE_API+'/'+employeeId,employee);   
    }


}
export default new EmployeeService();


step44:
-------
	Create "UpdateEmployeeComponent.js" file inside "components" folder.

UpdateEmployeeComponent.js
--------------------------
import React from 'react'
import { useState, useEffect } from 'react'
import {useParams, useNavigate} from 'react-router-dom';
import EmployeeService from '../services/EmployeeService.js';

function UpdateEmployeeComponent() 
{

  const navigate=useNavigate();

  const [firstName,setFirstName]=useState("");
  const [lastName,setLastName]=useState("");
  const [email,setEmail]=useState("");
  const {id}=useParams();

  useEffect(()=>{
      EmployeeService.getEmployeeById(id).then((res)=>
      {
          setFirstName(res.data.firstName);
          setLastName(res.data.lastName);
          setEmail(res.data.email);
      })
  },[])

  const cancelHandle=(e)=>
  {
    e.preventDefault();
    navigate("/employees");
  }



  return (
     <div className='container'>
         <div className='row mt-2'>
            <div className='col-6 offset-md-3'>
              <div className='card p-5'>
              <h4 className='text-center'> update Employee </h4> 
                 <form>
                    <div className='form-group'>
                        <label className='my-3'>First Name :</label>
                        <input type="text" name="firstName" id='firstName' className='form-control'
                        value={firstName}
                        onChange={(e)=> setFirstName(e.target.value)}
                       />
                      
                        <label className='my-3'>Last Name :</label>
                        <input type="text" name="lastName" id='lastName' className='form-control'
                        value={lastName}
                        onChange={(e)=> setLastName(e.target.value)}
                       />
                      
                        <label className='my-3'>Email :</label>
                        <input type="text" name="email" id='email' className='form-control'
                        value={email}
                        onChange={(e)=> setEmail(e.target.value)}
                       />
                      
                        <button className='mt-3 btn btn-danger' onClick={cancelHandle}>cancel</button>
                        <button className='mt-3 btn btn-success ms-3' >save</button>
                    </div>
                  </form>
              </div>
            </div>
          </div> 
    </div>

  )
}

export default UpdateEmployeeComponent



step45:
------
	Add UpdateEmployeeComponent.js file for routing inside App.js file.

App.js 
------
import React from 'react'
import EmployeeListComponent from './components/EmployeeListComponent'
import HeaderComponent from './components/HeaderComponent'
import FooterComponent from './components/FooterComponent'
import {BrowserRouter, Routes, Route} from 'react-router-dom';
import CreateEmployeeComponent from './components/CreateEmployeeComponent';
import UpdateEmployeeComponent from './components/UpdateEmployeeComponent';

function App() {
  return (
    <div>
        <HeaderComponent/>
        
        <BrowserRouter>
        
        <div className="container">
            <Routes>
              <Route exact path="/" element={<EmployeeListComponent/>}></Route>
              <Route path="/employees" element={<EmployeeListComponent/>}></Route>
              <Route path="/add-employee" element={<CreateEmployeeComponent/>}></Route>
              <Route path="/update-employee/:id" element={<UpdateEmployeeComponent/>}></Route>
            </Routes>
        </div>

        </BrowserRouter>

        <FooterComponent/>
    </div>
  )
}

export default App

step46:
------
	Add update button inside "EmployeeListComponent.js" file.

EmployeeListComponent.js 
--------------------------
import React, { Component } from 'react'
import EmployeeService from '../services/EmployeeService.js';
import {Link} from 'react-router-dom';

export default class EmployeeListComponent extends Component 
{
  constructor(props)
  {
        super(props);

        this.state={
            employees:[]
        }
  }  
  componentDidMount()
  {
    EmployeeService.getEmployees().then((res)=>{
        this.setState({employees:res.data});
    })
  }
  render() 
  {
    return (
      <div className='container mt-3'>
            <h4 className='text-center'> Employee List </h4>
            <div className='row mt-4'>
            <Link to="/add-employee" className='btn btn-primary mb-3'> Add Employee </Link>
                <table className='table table-bordered table-striped'>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>FIRST-NAME</th>
                            <th>LAST-NAME</th>
                            <th>EMAIL</th>
                            <th>ACTION</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            this.state.employees.map((employee)=>{
                                return <tr key={employee.id}>
                                            <td>{employee.id}</td>
                                            <td>{employee.firstName}</td>
                                            <td>{employee.lastName}</td>
                                            <td>{employee.email}</td>
                                            <td>
 <Link to={`/update-employee/${employee.id}`} className='btn btn-info' >update</Link>                                               
                                            </td>
                                        </tr>
                            })
                        }
                    </tbody>
                </table>
            </div>
      </div>
    )
  }
}











































